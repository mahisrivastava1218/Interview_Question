   //first check for nums[0]>nums[1] return 0; 
   //else if last one is true nums[n-1]>nums[n-2] return n-1;
   //else binary search mid=(left+right)/2;
   //if arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1] means condition met return mid;
   //else arr[mid]>arr[mid-1] left=mid+1;
   //else arr[mid]>arr[mid+1] right=mid-1;
   //edge case would be peak in between that low or high so loop will not stop either left=mid+1 or right=mid-1 because peak can anywhere left or right and loop should not stop

var findPeakElement = function(nums) {
   let n=nums.length;
   if(n===1) return 0;
   if(nums[0]>nums[1]) return 0;
   if(nums[n-1]>nums[n-2]) return n-1;
   let left=1,right=n-2;
   while(left<=right){
          let mid=Math.floor((left+right)/2);
          if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]) return mid;
          else if(nums[mid]>nums[mid-1]) left=mid+1;
          else if(nums[mid]>nums[mid+1]) right=mid-1;
          else right=mid-1;
   }
   return -1;
};
