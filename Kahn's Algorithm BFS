//Find Topological Ordering
function topologicalOrdering(node, edges, edgelist){
    const adj=Array.from({length:node+1},()=>[]);
    for(const [u,v] of edgelist){
        adj[u].push(v);
    }
    const inDegree = new Map();
    for(let i=1;i<=node;i++){
        inDegree.set(i,0);
    }
    for(let i=1;i<=node;i++){
        for(let nbr of adj[i]){
           inDegree.set(nbr, inDegree.get(nbr) + 1);
        }
    }
    const queue=[];
    for(let i=1;i<=node;i++){
        if(inDegree.get(i)===0){
            queue.push(i);
        }
    }
    // console.log(adj);
    // console.log(inDegree);
    // console.log(queue);
    const topoSorted = [];
    while(queue.length>0){
        let node = queue.shift();
        topoSorted.push(node);
        // console.log(topoSorted);
        for(let nbr of adj[node]){
              inDegree.set(nbr, inDegree.get(nbr)-1);
            if(inDegree.get(nbr)==0){
              queue.push(nbr);
           }
        }
    }
    return topoSorted.join(' ');
}
// Kahn's Algorithm for Topological Sorting of a Directed Acyclic Graph (DAG) using BFS.
// Time Complexity: O(V + E) //V=node

// Space Complexity: O(V + E)
