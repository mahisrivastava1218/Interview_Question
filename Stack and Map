///Evaluate if the givrn parenthesis combination is balanced
class Stack {
    constructor(){
        this.items = [];
    }
    //pushes new element on top
    push(element){
        this.items.push(element);
    }
    //removes top most element 
    pop(){
        if (this.isEmpty())
            return undefined;
        return this.items.pop();
    }
    //returns the top most element
    peek(){
        if (this.isEmpty())
            return undefined;
        return this.items[this.items.length - 1];
    }
    //returns true if empty
    isEmpty(){
        return this.items.length == 0;
    }
    //returns the size of stack
    size(){
        return this.items.length;
    }
}

function validParenthesis(s) {
    if(s.length <= 1) return false;
    let stack=new Stack();
    const map={
        ')':'(',
        ']':'[',
        '}':'{'
    }
    for(let char of s){

        if(["(",'[','{'].includes(char)){
            stack.push(char);
        }else if(map[char]){
            if(stack.isEmpty() || stack.peek()!==map[char]){
               return false;
            }
            stack.pop();
        }else{
            return false;
        }
    }
    // tc:O(n) SC:O(n)
    // for(let i=0;i<s.length;i++){
    //     if(s.charAt(i)==="(" || s.charAt(i)==="[" || s.charAt(i)==="{"){
    //         stack.push(s.charAt(i));
    //     }else if(s.charAt(i)===")" && stack.peek() === "("){
    //         stack.pop();
    //     }else if(s.charAt(i)==="]" && stack.peek()==="["){
    //         stack.pop();
    //     }else if(s.charAt(i)==="}" && stack.peek()==="{"){
    //         stack.pop();
    //     }else{
    //         return false;
    //     }
    // }
    // if(stack.length>0){
    //     return false;
    // }else{
    //     return true;
    // }
}
